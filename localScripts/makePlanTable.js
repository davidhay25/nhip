#!/usr/bin/env node
/**
 * Make a display table for the Plan. Customized for the structure (2 level) of this IG
 * 
 * WARNING: getting data from extensions pre-supposed a defined order of them!
 */

let fs = require('fs');
let fileName = "fsh-generated/resources/PlanDefinition-pd2.json"
let outFile = "input/pagecontent/paedplan.xml";  

let diseaseCoveredExtUrl = "http://clinfhir.com/StructureDefinition/disease-covered"

let newBornExampleIR = "input/examples/ImmunizationRecommendation-paedplan.json"

//load the plandefinition
let contents = fs.readFileSync(fileName).toString();
let plan = JSON.parse(contents)

//create a hash of ActivityDefinitions by url (needed for the plan action)
let hashAD = {};
let arFiles = fs.readdirSync("fsh-generated/resources");
arFiles.forEach(function(name){
    if (name.indexOf("ActivityDefinition") > -1 ) {
        let fullFileName = "fsh-generated/resources/"+ name;
        let adContents = fs.readFileSync(fullFileName).toString();
        let AD = JSON.parse(adContents)
        hashAD[AD.url] = AD;
    }
})

//create a disease hash for the display by disease
let hashDiseases = {}

let ar = []     //the report by age
ar.push("<div xmlns='http://www.w3.org/1999/xhtml'>")

ar.push("<!-- Generated by the makePlanTable script -->")

ar.push('<a name="byAge"> </a>')   
ar.push("<h3>Paediatric program by Age</h3>")

//ar.push("<br/><strong>Paediatric program by Age</strong><br/><br/>")
ar.push("<table class='table table-bordered table-hover table-sm'>")
ar.push("<tr><th>Age</th><th>AD Url</th><th>Vaccine</th><th>Series</th><th>Sequence</th><th>Diseases Covered</th></tr>")

let hashSeries = {}
let IR = {"resourceType":"ImmunizationRecommendation"}
IR.id = "paedplan"
IR.description = "A sample recommendation for a newborn due to have all immunizations"

//extension for the linp to the plan definition
IR.extension = [{url:"http://clinfhir.com/StructureDefinition/plandefinition-url",valueUri:plan.url}]

IR.patient = {reference:{display:"Patient reference here"}}
IR.date = new Date().toISOString();
IR.recommendation = []

//top level actions (age of admin)
plan.action.forEach(function(top){  
//console.log(top)
    let age = top.timingAge.value;      //age in weeks or months
    let units = top.timingAge.code;      //the units for the age

    let ageToAdminister = age * 7;  //assume weeks
    if (units == "mo") {
        ageToAdminister = age * 30
    }
    let dateToAdminister = new Date()
    dateToAdminister.setDate(new Date().getDate() + ageToAdminister)

    //detail level action - vaccine given
    top.action.forEach(function(detail){
        let adUrl = detail.definitionCanonical
        

        ar.push("<tr>")
        ar.push("<td>" + age + " " + units + "</td>")
        ar.push("<td>" + adUrl + "</td>")

        let ad = hashAD[adUrl]
        if (!ad) {
            console.log(">>>>>>>> Error: AD not found for url:" + adUrl)
            //the app should crash and burn if ad is null...
        } 




        //console.log(ad.dosage[0].route)
        let ccCode = ad.productCodeableConcept
        let vaccineCode = ccCode.coding[0].code
        let vaccineDisplay = ccCode.coding[0].display
        ar.push("<td>" + vaccineDisplay +  " (" + vaccineCode + ")")
        ar.push("<div>")
        ar.push(ad.dosage[0].doseAndRate[0].doseQuantity.value + " " + ad.dosage[0].doseAndRate[0].doseQuantity.code + " ")
        ar.push(ad.dosage[0].route.coding[0].display)
        ar.push("</div>")
        ar.push("</td>")

           

        //the series & sequence
        let vo = getSeries(detail.extension[0])
        ar.push("<td>" + vo.series + "</td>")
        ar.push("<td>" + vo.sequence + "</td>")

        //now to create the recommendation for this vaccine
        let rec = {}
        rec.vaccineCode = ccCode;
        rec.foreCastStatus = {coding:[{code:'due',system:'http://terminology.hl7.org/CodeSystem/immunization-recommendation-status'}]}
        let criterion = {coding:[{code:'30980-7',system:'http://loinc.org'}]}
        criterion.value =  dateToAdminister

        rec.dateCriterion = [criterion]
        rec.series = vo.series
        rec.doseNumberPositiveInt = vo.sequence;

        //now copy across the disease coverage extensions
       
        if (ad.extension) {
            ad.extension.forEach(function(ext){
                //console.log(ext.url,diseaseCoveredExtUrl)
                if (ext.url == diseaseCoveredExtUrl) {
                    rec.extension = rec.extension || []
                    rec.extension.push(ext)
                }
            })
        }
        

        IR.recommendation.push(rec)

        //update the hash for the report by series
        hashSeries[vo.series] = hashSeries[vo.series] || []
        hashSeries[vo.series].push({age:age,units:units})

        //add the diseases
        let diseases = getDiseases(ad)
        ar.push("<td>")
        if (diseases.length > 0) {
            diseases.forEach(function(dis){
                ar.push("<div>" + dis.display + "</div>")
                //update the hash for the display...
                hashDiseases[dis.code] = hashDiseases[dis.code] || []
                let item = {disease:dis.display,age:age, units:units, vaccine:ad.productCodeableConcept}
                hashDiseases[dis.code].push(item)
            })
        } 
        ar.push("</td>")
        ar.push("</tr>")
        //console.log(detail)

    })
})

ar.push("</table>")

//console.log(IR)


//now we can add the report by series
ar.push('<a name="bySeries"> </a>')   
ar.push("<h3>Paediatric program by Vaccination series</h3>")
ar.push("<table class='table table-bordered table-hover table-sm'>")
ar.push("<tr><th>Series</th><th>Ages</th></tr>")

Object.keys(hashSeries).forEach(function(key){
    ar.push("<tr>")
    ar.push("<td width='20%'>" + key + "</td>")
    let item = hashSeries[key]
    ar.push("<td>")
    item.forEach(function(sequence) {
        ar.push("<div>" + sequence.age + " " + sequence.units + "</div>")
    })
    ar.push("</td>")

    ar.push("</tr>")
})

ar.push("</table>")

//{age:age, units:units, vaccine:ad.productCodeableConcept}

//now the report by disease
//now we can add the report by series
ar.push('<a name="byDisease"> </a>')   
ar.push("<h3>Programme of diseases covered</h3>")
ar.push("<table class='table table-bordered table-hover table-sm'>")
ar.push("<tr><th>Disease</th><th>Ages</th></tr>")

Object.keys(hashDiseases).forEach(function(key){
    ar.push("<tr>")
    let item = hashDiseases[key]
    //console.log(item)
    ar.push("<td width='20%'>" + item[0].disease + "</td>")
    
    ar.push("<td>")

    ar.push("<table>")
    item.forEach(function(admin) {
        ar.push("<tr>")
        ar.push("<td class = 'width:130px'>" + admin.age + " " + admin.units + "</td>")
        ar.push("<td>" + admin.vaccine.coding[0].display + "</td>")
        ar.push("</tr>")
    })

    ar.push("</table>")
    ar.push("</td>")

    ar.push("</tr>")
})

ar.push("</table>")

//now add the ID
ar.push('<a name="IR"> </a>')   
ar.push("<h3>Sample ImmunizationRecommendation for newborn</h3>")
ar.push("<pre>" + JSON.stringify(IR,null,2) + "</pre>")


ar.push("</div>")


let file1 = ar.join('\r\n')

fs.writeFileSync(outFile,file1);

//write out the sample paediatric plan
fs.writeFileSync(newBornExampleIR,JSON.stringify(IR,null,2));




//return the series and sequence from the extension
function getSeries(ext) {
    let vo = {}
    vo.series = ext.extension[0].valueString;
    vo.sequence = ext.extension[1].valuePositiveInt;
    return vo;
}

//get the list of diseases
function getDiseases(ad) {
    let diseases = []
    if (ad.extension) {
        ad.extension.forEach(function(ext){
            //console.log(ext.url,diseaseCoveredExtUrl)
            if (ext.url == diseaseCoveredExtUrl) {
                let code = ext.valueCodeableConcept.coding[0].code;
                let display = ext.valueCodeableConcept.coding[0].display;

                diseases.push({code:code,display:display})
            }
        })
    }
    return diseases;
}